% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Train_validate.R
\name{train_LBBNN}
\alias{train_LBBNN}
\title{Function to train an instance of LBBNN_Net}
\usage{
train_LBBNN(epochs, LBBNN, lr, train_dl, device = "cpu")
}
\arguments{
\item{epochs}{Total number of epochs to train for, where one epoch is a pass through the entire training dataset (all minibatches).}

\item{LBBNN}{An instance of the LBBNN_Net class, to be trained.}

\item{lr}{The learning rate to be used in the Adam optimizer.}

\item{train_dl}{An instance of torch dataloader, containing the data to be trained.}

\item{device}{the device to be trained on. Default is cpu.}
}
\value{
a list containing the losses and accuracies (if classification) and density for each epoch during training.
}
\description{
Function that for each epoch itereates through each mini-batch, computing
the loss and using backpropagation to update the network parameters.
}
\examples{
x<-torch::torch_randn(1000,10) #generate some data
b <- torch::torch_rand(10)
y <- torch::torch_matmul(x,b)
med <- torch::torch_median(y)
y[y > med] = 1 #change it into binary classification
y[y <= med] = 0
train_data <- torch::tensor_dataset(x,y)
train_loader <- torch::dataloader(train_data,batch_size = 100,shuffle=TRUE)
problem<-'binary classification'
sizes <- c(10,50,1) #10 input variables, one hidden layer of 50 neurons, 1 output
inclusion_priors <-c(0.3,0.9) #one prior probability per weight matrix
stds <- c(1.0,1.0)
model <- LBBNN_Net(problem,sizes,inclusion_priors,stds)
output <- train_LBBNN(epochs = 10,LBBNN = model, lr = 0.01,train_dl = train_loader)
}
